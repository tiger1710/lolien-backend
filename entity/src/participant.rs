//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "participant")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub match_id: String,
    pub kills: Option<i32>,
    pub deaths: Option<i32>,
    pub assists: Option<i32>,
    pub champ_level: Option<i32>,
    pub champion_id: Option<i32>,
    pub champion_name: Option<String>,
    pub champion_transform: Option<i32>,
    pub summoner_spell1_id: Option<i32>,
    pub summoner_spell2_id: Option<i32>,
    pub summoner_name: Option<String>,
    pub item0: Option<i32>,
    pub item1: Option<i32>,
    pub item2: Option<i32>,
    pub item3: Option<i32>,
    pub item4: Option<i32>,
    pub item5: Option<i32>,
    pub item6: Option<i32>,
    pub primary_perk_selection1: Option<i32>,
    pub primary_perk_selection2: Option<i32>,
    pub primary_perk_selection3: Option<i32>,
    pub primary_perk_selection4: Option<i32>,
    pub sub_perk_selection1: Option<i32>,
    pub sub_perk_selection2: Option<i32>,
    pub stat_perk_offense: Option<i32>,
    pub stat_perk_defense: Option<i32>,
    pub stat_perk_flex: Option<i32>,
    pub total_damage_dealt_to_champions: Option<i32>,
    pub total_damage_taken: Option<i32>,
    pub total_minions_killed: Option<i32>,
    pub gold_earned: Option<i32>,
    pub team_position: Option<String>,
    pub vision_score: Option<i32>,
    pub vision_wards_bought_in_game: Option<i32>,
    pub wards_killed: Option<i32>,
    pub wards_placed: Option<i32>,
    pub team_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::match_info::Entity",
        from = "Column::MatchId",
        to = "super::match_info::Column::MatchId",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    MatchInfo,
}

impl Related<super::match_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MatchInfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
