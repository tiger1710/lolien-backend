//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "participant")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub match_id: String,
    pub kills: Option<i32>,
    pub deaths: Option<i32>,
    pub assists: Option<i32>,
    pub champ_level: Option<i32>,
    pub champion_id: Option<i32>,
    pub champion_name: Option<String>,
    pub champion_transform: Option<i32>,
    pub summoner_spell1_id: Option<i32>,
    pub summoner_spell2_id: Option<i32>,
    pub summoner_name: Option<String>,
    pub item0: Option<i32>,
    pub item1: Option<i32>,
    pub item2: Option<i32>,
    pub item3: Option<i32>,
    pub item4: Option<i32>,
    pub item5: Option<i32>,
    pub item6: Option<i32>,
    pub primary_perk_selection1: Option<i32>,
    pub primary_perk_selection2: Option<i32>,
    pub primary_perk_selection3: Option<i32>,
    pub primary_perk_selection4: Option<i32>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub puuid: String,
    pub sub_perk_selection1: Option<i32>,
    pub sub_perk_selection2: Option<i32>,
    pub stat_perk_offense: Option<i32>,
    pub stat_perk_defense: Option<i32>,
    pub stat_perk_flex: Option<i32>,
    pub total_damage_dealt_to_champions: Option<i32>,
    pub total_damage_taken: Option<i32>,
    pub total_minions_killed: Option<i32>,
    pub gold_earned: Option<i32>,
    pub team_position: Option<String>,
    pub vision_score: Option<i32>,
    pub vision_wards_bought_in_game: Option<i32>,
    pub wards_killed: Option<i32>,
    pub wards_placed: Option<i32>,
    pub team_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::match_info::Entity",
        from = "Column::MatchId",
        to = "super::match_info::Column::MatchId",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    MatchInfo,
}

impl Related<super::match_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MatchInfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<(&str, &riot_api::r#match::Participant)> for ActiveModel {
    fn from(value: (&str, &riot_api::r#match::Participant)) -> Self {
        use sea_orm::Set;

        let match_id = value.0;
        let p = value.1;

        ActiveModel {
            match_id: Set(match_id.to_owned()),
            kills: Set(Some(p.kills)),
            deaths: Set(Some(p.deaths)),
            assists: Set(Some(p.assists)),
            champ_level: Set(Some(p.champLevel)),
            champion_id: Set(Some(p.championId)),
            champion_name: Set(Some(p.championName.clone())),
            champion_transform: Set(Some(p.championTransform)),
            summoner_spell1_id: Set(Some(p.summoner1Id)),
            summoner_spell2_id: Set(Some(p.summoner2Id)),
            summoner_name: Set(Some(p.summonerName.clone())),
            item0: Set(Some(p.item0)),
            item1: Set(Some(p.item1)),
            item2: Set(Some(p.item2)),
            item3: Set(Some(p.item3)),
            item4: Set(Some(p.item4)),
            item5: Set(Some(p.item5)),
            item6: Set(Some(p.item6)),
            primary_perk_selection1: Set(Some(p.perks.styles[0].selections[0].perk)),
            primary_perk_selection2: Set(Some(p.perks.styles[0].selections[1].perk)),
            primary_perk_selection3: Set(Some(p.perks.styles[0].selections[2].perk)),
            primary_perk_selection4: Set(Some(p.perks.styles[0].selections[3].perk)),
            puuid: Set(p.puuid.clone()),
            sub_perk_selection1: Set(Some(p.perks.styles[1].selections[0].perk)),
            sub_perk_selection2: Set(Some(p.perks.styles[1].selections[1].perk)),
            stat_perk_offense: Set(Some(p.perks.statPerks.offense)),
            stat_perk_defense: Set(Some(p.perks.statPerks.defense)),
            stat_perk_flex: Set(Some(p.perks.statPerks.flex)),
            total_damage_dealt_to_champions: Set(Some(p.totalDamageDealtToChampions)),
            total_damage_taken: Set(Some(p.totalDamageTaken)),
            total_minions_killed: Set(Some(p.totalMinionsKilled)),
            gold_earned: Set(Some(p.goldEarned)),
            team_position: Set(Some(p.teamPosition.clone())),
            vision_score: Set(Some(p.visionScore)),
            vision_wards_bought_in_game: Set(Some(p.visionWardsBoughtInGame)),
            wards_killed: Set(Some(p.wardsKilled)),
            wards_placed: Set(Some(p.wardsPlaced)),
            team_id: Set(Some(p.teamId)),
        }
    }
}
