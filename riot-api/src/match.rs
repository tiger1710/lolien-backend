use serde::{Deserialize, Serialize};

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct Metadata {
    pub dataVersion: String,
    pub matchId: String,
    pub participants: Vec<String>,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct Challenges {
    #[serde(rename = "12AssistStreakCount")]
    pub twelveAssistStreakCount: i32,
    pub abilityUses: i32,
    pub acesBefore15Minutes: i32,
    pub alliedJungleMonsterKills: f64,
    pub baronTakedowns: i32,
    pub blastConeOppositeOpponentCount: i32,
    pub bountyGold: i32,
    pub buffsStolen: i32,
    pub completeSupportQuestInTime: i32,
    pub controlWardsPlaced: i32,
    pub damagePerMinute: f64,
    pub damageTakenOnTeamPercentage: f64,
    pub dancedWithRiftHerald: i32,
    pub deathsByEnemyChamps: i32,
    pub dodgeSkillShotsSmallWindow: i32,
    pub doubleAces: i32,
    pub dragonTakedowns: i32,
    pub earliestBaron: Option<f64>,
    pub earliestDragonTakedown: f64,
    pub earliestElderDragon: i32,
    pub earlyLaningPhaseGoldExpAdvantage: i32,
    pub effectiveHealAndShielding: f64,
    pub elderDragonKillsWithOpposingSoul: i32,
    pub elderDragonMultikills: i32,
    pub enemyChampionImmobilizations: i32,
    pub enemyJungleMonsterKills: f64,
    pub epicMonsterKillsNearEnemyJungler: i32,
    pub epicMonsterKillsWithin30SecondsOfSpawn: i32,
    pub epicMonsterSteals: i32,
    pub epicMonsterStolenWithoutSmite: i32,
    pub fastestLegendary: f64,
    pub firstTurretKilledTime: Option<f64>,
    pub flawlessAces: i32,
    pub fullTeamTakedown: i32,
    pub gameLength: f64,
    pub getTakedownsInAllLanesEarlyJungleAsLaner: Option<i32>,
    pub goldPerMinute: f64,
    pub hadOpenNexus: i32,
    pub immobilizeAndKillWithAlly: i32,
    pub initialBuffCount: i32,
    pub initialCrabCount: i32,
    pub jungleCsBefore10Minutes: f64,
    pub junglerTakedownsNearDamagedEpicMonster: i32,
    pub kTurretsDestroyedBeforePlatesFall: i32,
    pub kda: f64,
    pub killAfterHiddenWithAlly: i32,
    pub killParticipation: f64,
    pub killedChampTookFullTeamDamageSurvived: i32,
    pub killingSprees: Option<i32>,
    pub killsNearEnemyTurret: i32,
    pub killsOnOtherLanesEarlyJungleAsLaner: Option<i32>,
    pub killsOnRecentlyHealedByAramPack: i32,
    pub killsUnderOwnTurret: i32,
    pub killsWithHelpFromEpicMonster: i32,
    pub knockEnemyIntoTeamAndKill: i32,
    pub landSkillShotsEarlyGame: i32,
    pub laneMinionsFirst10Minutes: i32,
    pub laningPhaseGoldExpAdvantage: i32,
    pub legendaryCount: i32,
    pub lostAnInhibitor: i32,
    pub maxCsAdvantageOnLaneOpponent: f64,
    pub maxKillDeficit: i32,
    pub maxLevelLeadLaneOpponent: i32,
    pub moreEnemyJungleThanOpponent: f64,
    pub multiKillOneSpell: i32,
    pub multiTurretRiftHeraldCount: i32,
    pub multikills: i32,
    pub multikillsAfterAggressiveFlash: i32,
    pub mythicItemUsed: i32,
    pub outerTurretExecutesBefore10Minutes: i32,
    pub outnumberedKills: i32,
    pub outnumberedNexusKill: i32,
    pub perfectDragonSoulsTaken: i32,
    pub perfectGame: i32,
    pub pickKillWithAlly: i32,
    pub playedChampSelectPosition: i32,
    pub poroExplosions: i32,
    pub quickCleanse: i32,
    pub quickFirstTurret: i32,
    pub quickSoloKills: i32,
    pub riftHeraldTakedowns: i32,
    pub saveAllyFromDeath: i32,
    pub scuttleCrabKills: i32,
    pub shortestTimeToAceFromFirstTakedown: Option<f64>,
    pub skillshotsDodged: i32,
    pub skillshotsHit: i32,
    pub snowballsHit: i32,
    pub soloBaronKills: i32,
    pub soloKills: i32,
    pub soloTurretsLategame: Option<i32>,
    pub stealthWardsPlaced: i32,
    pub survivedSingleDigitHpCount: i32,
    pub survivedThreeImmobilizesInFight: i32,
    pub takedownOnFirstTurret: i32,
    pub takedowns: i32,
    pub takedownsAfterGainingLevelAdvantage: i32,
    pub takedownsBeforeJungleMinionSpawn: i32,
    pub takedownsFirstXMinutes: i32,
    pub takedownsInAlcove: i32,
    pub takedownsInEnemyFountain: i32,
    pub teamBaronKills: i32,
    pub teamDamagePercentage: f64,
    pub teamElderDragonKills: i32,
    pub teamRiftHeraldKills: i32,
    pub thirdInhibitorDestroyedTime: Option<f64>,
    pub threeWardsOneSweeperCount: i32,
    pub tookLargeDamageSurvived: i32,
    pub turretPlatesTaken: i32,
    pub turretTakedowns: i32,
    pub turretsTakenWithRiftHerald: i32,
    pub twentyMinionsIn3SecondsCount: i32,
    pub unseenRecalls: i32,
    pub visionScoreAdvantageLaneOpponent: f64,
    pub visionScorePerMinute: f64,
    pub wardTakedowns: i32,
    pub wardTakedownsBefore20M: i32,
    pub WardsGuarded: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct PerkStats {
    pub defense: i32,
    pub flex: i32,
    pub offense: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct PerkStyleSelection {
    pub perk: i32,
    pub var1: i32,
    pub var2: i32,
    pub var3: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct PerkStyle {
    pub description: String,
    pub selections: Vec<PerkStyleSelection>,
    pub style: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct Perks {
    pub statPerks: PerkStats,
    pub styles: Vec<PerkStyle>,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct Participant {
    pub allInPings: i32,
    pub assistMePings: i32,
    pub assists: i32,
    pub baitPings: i32,
    pub baronKills: i32,
    pub basicPings: i32,
    pub bountyLevel: i32,
    // pub challenges: Challenges,
    pub champExperience: i32,
    pub champLevel: i32,
    pub championId: i32,
    pub championName: String,
    pub championTransform: i32,
    pub commandPings: i32,
    pub consumablesPurchased: i32,
    pub damageDealtToBuildings: i32,
    pub damageDealtToObjectives: i32,
    pub damageDealtToTurrets: i32,
    pub damageSelfMitigated: i32,
    pub dangerPings: i32,
    pub deaths: i32,
    pub detectorWardsPlaced: i32,
    pub doubleKills: i32,
    pub dragonKills: i32,
    pub eligibleForProgression: bool,
    pub enemyMissingPings: i32,
    pub enemyVisionPings: i32,
    pub firstBloodAssist: bool,
    pub firstBloodKill: bool,
    pub firstTowerAssist: bool,
    pub firstTowerKill: bool,
    pub gameEndedInEarlySurrender: bool,
    pub gameEndedInSurrender: bool,
    pub getBackPings: i32,
    pub goldEarned: i32,
    pub goldSpent: i32,
    pub holdPings: i32,
    pub individualPosition: String,
    pub inhibitorKills: i32,
    pub inhibitorTakedowns: i32,
    pub inhibitorsLost: i32,
    pub item0: i32,
    pub item1: i32,
    pub item2: i32,
    pub item3: i32,
    pub item4: i32,
    pub item5: i32,
    pub item6: i32,
    pub itemsPurchased: i32,
    pub killingSprees: i32,
    pub kills: i32,
    pub lane: String,
    pub largestCriticalStrike: i32,
    pub largestKillingSpree: i32,
    pub largestMultiKill: i32,
    pub longestTimeSpentLiving: i32,
    pub magicDamageDealt: i32,
    pub magicDamageDealtToChampions: i32,
    pub magicDamageTaken: i32,
    pub needVisionPings: i32,
    pub neutralMinionsKilled: i32,
    pub nexusKills: i32,
    pub nexusLost: i32,
    pub nexusTakedowns: i32,
    pub objectivesStolen: i32,
    pub objectivesStolenAssists: i32,
    pub onMyWayPings: i32,
    pub participantId: i32,
    pub pentaKills: i32,
    pub perks: Perks,
    pub physicalDamageDealt: i32,
    pub physicalDamageDealtToChampions: i32,
    pub physicalDamageTaken: i32,
    pub profileIcon: i32,
    pub pushPings: i32,
    pub puuid: String,
    pub quadraKills: i32,
    pub riotIdName: String,
    pub riotIdTagline: String,
    pub role: String,
    pub sightWardsBoughtInGame: i32,
    pub spell1Casts: i32,
    pub spell2Casts: i32,
    pub spell3Casts: i32,
    pub spell4Casts: i32,
    pub summoner1Casts: i32,
    pub summoner1Id: i32,
    pub summoner2Casts: i32,
    pub summoner2Id: i32,
    pub summonerId: String,
    pub summonerLevel: i32,
    pub summonerName: String,
    pub teamEarlySurrendered: bool,
    pub teamId: i32,
    pub teamPosition: String,
    pub timeCCingOthers: i32,
    pub timePlayed: i32,
    pub totalDamageDealt: i32,
    pub totalDamageDealtToChampions: i32,
    pub totalDamageShieldedOnTeammates: i32,
    pub totalDamageTaken: i32,
    pub totalHeal: i32,
    pub totalHealsOnTeammates: i32,
    pub totalMinionsKilled: i32,
    pub totalTimeCCDealt: i32,
    pub totalTimeSpentDead: i32,
    pub totalUnitsHealed: i32,
    pub tripleKills: i32,
    pub turretKills: i32,
    pub turretTakedowns: i32,
    pub turretsLost: i32,
    pub unrealKills: i32,
    pub visionClearedPings: i32,
    pub visionScore: i32,
    pub visionWardsBoughtInGame: i32,
    pub wardsKilled: i32,
    pub wardsPlaced: i32,
    pub win: bool,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct Ban {
    pub championId: i32,
    pub pickTurn: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct Objective {
    pub first: bool,
    pub kills: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct Objectives {
    pub baron: Objective,
    pub champion: Objective,
    pub dragon: Objective,
    pub inhibitor: Objective,
    pub riftHerald: Objective,
    pub tower: Objective,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct Team {
    pub bans: Vec<Ban>,
    pub objectives: Objectives,
    pub teamId: i32,
    pub win: bool,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
pub struct MatchInfo {
    pub gameCreation: i64,
    pub gameDuration: i32,
    pub gameEndTimestamp: i64,
    pub gameId: i64,
    pub gameMode: String,
    pub gameName: String,
    pub gameStartTimestamp: i64,
    pub gameType: String,
    pub gameVersion: String,
    pub mapId: i32,
    pub participants: Vec<Participant>,
    pub platformId: String,
    pub queueId: i32,
    pub teams: Vec<Team>,
    pub tournamentCode: String,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct Match {
    pub metadata: Metadata,
    pub info: MatchInfo,
}
