use serde::{Deserialize, Serialize};

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct Metadata {
    dataVersion: String,
    matchId: String,
    participants: Vec<String>,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct Challenges {
    #[serde(rename = "12AssistStreakCount")]
    twelveAssistStreakCount: i32,
    abilityUses: i32,
    acesBefore15Minutes: i32,
    alliedJungleMonsterKills: f64,
    baronTakedowns: i32,
    blastConeOppositeOpponentCount: i32,
    bountyGold: i32,
    buffsStolen: i32,
    completeSupportQuestInTime: i32,
    controlWardsPlaced: i32,
    damagePerMinute: f64,
    damageTakenOnTeamPercentage: f64,
    dancedWithRiftHerald: i32,
    deathsByEnemyChamps: i32,
    dodgeSkillShotsSmallWindow: i32,
    doubleAces: i32,
    dragonTakedowns: i32,
    earliestBaron: Option<f64>,
    earliestDragonTakedown: f64,
    earliestElderDragon: i32,
    earlyLaningPhaseGoldExpAdvantage: i32,
    effectiveHealAndShielding: f64,
    elderDragonKillsWithOpposingSoul: i32,
    elderDragonMultikills: i32,
    enemyChampionImmobilizations: i32,
    enemyJungleMonsterKills: f64,
    epicMonsterKillsNearEnemyJungler: i32,
    epicMonsterKillsWithin30SecondsOfSpawn: i32,
    epicMonsterSteals: i32,
    epicMonsterStolenWithoutSmite: i32,
    fastestLegendary: f64,
    firstTurretKilledTime: Option<f64>,
    flawlessAces: i32,
    fullTeamTakedown: i32,
    gameLength: f64,
    getTakedownsInAllLanesEarlyJungleAsLaner: Option<i32>,
    goldPerMinute: f64,
    hadOpenNexus: i32,
    immobilizeAndKillWithAlly: i32,
    initialBuffCount: i32,
    initialCrabCount: i32,
    jungleCsBefore10Minutes: f64,
    junglerTakedownsNearDamagedEpicMonster: i32,
    kTurretsDestroyedBeforePlatesFall: i32,
    kda: f64,
    killAfterHiddenWithAlly: i32,
    killParticipation: f64,
    killedChampTookFullTeamDamageSurvived: i32,
    killingSprees: Option<i32>,
    killsNearEnemyTurret: i32,
    killsOnOtherLanesEarlyJungleAsLaner: Option<i32>,
    killsOnRecentlyHealedByAramPack: i32,
    killsUnderOwnTurret: i32,
    killsWithHelpFromEpicMonster: i32,
    knockEnemyIntoTeamAndKill: i32,
    landSkillShotsEarlyGame: i32,
    laneMinionsFirst10Minutes: i32,
    laningPhaseGoldExpAdvantage: i32,
    legendaryCount: i32,
    lostAnInhibitor: i32,
    maxCsAdvantageOnLaneOpponent: f64,
    maxKillDeficit: i32,
    maxLevelLeadLaneOpponent: i32,
    moreEnemyJungleThanOpponent: f64,
    multiKillOneSpell: i32,
    multiTurretRiftHeraldCount: i32,
    multikills: i32,
    multikillsAfterAggressiveFlash: i32,
    mythicItemUsed: i32,
    outerTurretExecutesBefore10Minutes: i32,
    outnumberedKills: i32,
    outnumberedNexusKill: i32,
    perfectDragonSoulsTaken: i32,
    perfectGame: i32,
    pickKillWithAlly: i32,
    playedChampSelectPosition: i32,
    poroExplosions: i32,
    quickCleanse: i32,
    quickFirstTurret: i32,
    quickSoloKills: i32,
    riftHeraldTakedowns: i32,
    saveAllyFromDeath: i32,
    scuttleCrabKills: i32,
    shortestTimeToAceFromFirstTakedown: Option<f64>,
    skillshotsDodged: i32,
    skillshotsHit: i32,
    snowballsHit: i32,
    soloBaronKills: i32,
    soloKills: i32,
    soloTurretsLategame: Option<i32>,
    stealthWardsPlaced: i32,
    survivedSingleDigitHpCount: i32,
    survivedThreeImmobilizesInFight: i32,
    takedownOnFirstTurret: i32,
    takedowns: i32,
    takedownsAfterGainingLevelAdvantage: i32,
    takedownsBeforeJungleMinionSpawn: i32,
    takedownsFirstXMinutes: i32,
    takedownsInAlcove: i32,
    takedownsInEnemyFountain: i32,
    teamBaronKills: i32,
    teamDamagePercentage: f64,
    teamElderDragonKills: i32,
    teamRiftHeraldKills: i32,
    thirdInhibitorDestroyedTime: Option<f64>,
    threeWardsOneSweeperCount: i32,
    tookLargeDamageSurvived: i32,
    turretPlatesTaken: i32,
    turretTakedowns: i32,
    turretsTakenWithRiftHerald: i32,
    twentyMinionsIn3SecondsCount: i32,
    unseenRecalls: i32,
    visionScoreAdvantageLaneOpponent: f64,
    visionScorePerMinute: f64,
    wardTakedowns: i32,
    wardTakedownsBefore20M: i32,
    wardsGuarded: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct PerkStats {
    defense: i32,
    flex: i32,
    offense: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct PerkStyleSelection {
    perk: i32,
    var1: i32,
    var2: i32,
    var3: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct PerkStyle {
    description: String,
    selections: Vec<PerkStyleSelection>,
    style: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct Perks {
    statPerks: PerkStats,
    styles: Vec<PerkStyle>,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct Participant {
    allInPings: i32,
    assistMePings: i32,
    assists: i32,
    baitPings: i32,
    baronKills: i32,
    basicPings: i32,
    bountyLevel: i32,
    // challenges: Challenges,
    champExperience: i32,
    champLevel: i32,
    championId: i32,
    championName: String,
    championTransform: i32,
    commandPings: i32,
    consumablesPurchased: i32,
    damageDealtToBuildings: i32,
    damageDealtToObjectives: i32,
    damageDealtToTurrets: i32,
    damageSelfMitigated: i32,
    dangerPings: i32,
    deaths: i32,
    detectorWardsPlaced: i32,
    doubleKills: i32,
    dragonKills: i32,
    eligibleForProgression: bool,
    enemyMissingPings: i32,
    enemyVisionPings: i32,
    firstBloodAssist: bool,
    firstBloodKill: bool,
    firstTowerAssist: bool,
    firstTowerKill: bool,
    gameEndedInEarlySurrender: bool,
    gameEndedInSurrender: bool,
    getBackPings: i32,
    goldEarned: i32,
    goldSpent: i32,
    holdPings: i32,
    individualPosition: String,
    inhibitorKills: i32,
    inhibitorTakedowns: i32,
    inhibitorsLost: i32,
    item0: i32,
    item1: i32,
    item2: i32,
    item3: i32,
    item4: i32,
    item5: i32,
    item6: i32,
    itemsPurchased: i32,
    killingSprees: i32,
    kills: i32,
    lane: String,
    largestCriticalStrike: i32,
    largestKillingSpree: i32,
    largestMultiKill: i32,
    longestTimeSpentLiving: i32,
    magicDamageDealt: i32,
    magicDamageDealtToChampions: i32,
    magicDamageTaken: i32,
    needVisionPings: i32,
    neutralMinionsKilled: i32,
    nexusKills: i32,
    nexusLost: i32,
    nexusTakedowns: i32,
    objectivesStolen: i32,
    objectivesStolenAssists: i32,
    onMyWayPings: i32,
    participantId: i32,
    pentaKills: i32,
    perks: Perks,
    physicalDamageDealt: i32,
    physicalDamageDealtToChampions: i32,
    physicalDamageTaken: i32,
    profileIcon: i32,
    pushPings: i32,
    puuid: String,
    quadraKills: i32,
    riotIdName: String,
    riotIdTagline: String,
    role: String,
    sightWardsBoughtInGame: i32,
    spell1Casts: i32,
    spell2Casts: i32,
    spell3Casts: i32,
    spell4Casts: i32,
    summoner1Casts: i32,
    summoner1Id: i32,
    summoner2Casts: i32,
    summoner2Id: i32,
    summonerId: String,
    summonerLevel: i32,
    summonerName: String,
    teamEarlySurrendered: bool,
    teamId: i32,
    teamPosition: String,
    timeCCingOthers: i32,
    timePlayed: i32,
    totalDamageDealt: i32,
    totalDamageDealtToChampions: i32,
    totalDamageShieldedOnTeammates: i32,
    totalDamageTaken: i32,
    totalHeal: i32,
    totalHealsOnTeammates: i32,
    totalMinionsKilled: i32,
    totalTimeCCDealt: i32,
    totalTimeSpentDead: i32,
    totalUnitsHealed: i32,
    tripleKills: i32,
    turretKills: i32,
    turretTakedowns: i32,
    turretsLost: i32,
    unrealKills: i32,
    visionClearedPings: i32,
    visionScore: i32,
    visionWardsBoughtInGame: i32,
    wardsKilled: i32,
    wardsPlaced: i32,
    win: bool,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct Ban {
    championId: i32,
    pickTurn: i32,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct Objective {
    first: bool,
    kills: i32
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct Objectives {
    baron: Objective,
    champion: Objective,
    dragon: Objective,
    inhibitor: Objective,
    riftHerald: Objective,
    tower: Objective,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct Team {
    bans: Vec<Ban>,
    objectives: Objectives,
    teamId: i32,
    win: bool,
}

#[derive(Deserialize, Serialize, Debug)]
#[allow(non_snake_case)]
struct MatchInfo {
    gameCreation: i64,
    gameDuration: i32,
    gameEndTimestamp: i64,
    gameId: i64,
    gameMode: String,
    gameName: String,
    gameStartTimestamp: i64,
    gameType: String,
    gameVersion: String,
    mapId: i32,
    participants: Vec<Participant>,
    platformId: String,
    queueId: i32,
    teams: Vec<Team>,
    tournamentCode: String,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct Match {
    metadata: Metadata,
    info: MatchInfo,
}
